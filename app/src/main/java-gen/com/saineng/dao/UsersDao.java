package com.saineng.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Users;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Users.
*/
public class UsersDao extends AbstractDao<Users, Long> {

    public static final String TABLENAME = "Users";

    /**
     * Properties of entity Users.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Order_id = new Property(1, String.class, "order_id", false, "ORDER_ID");
        public final static Property Goods_name = new Property(2, String.class, "goods_name", false, "GOODS_NAME");
        public final static Property Goods_num = new Property(3, String.class, "goods_num", false, "GOODS_NUM");
        public final static Property User_name = new Property(4, String.class, "user_name", false, "USER_NAME");
        public final static Property User_id = new Property(5, String.class, "user_id", false, "USER_ID");
        public final static Property User_phone = new Property(6, String.class, "user_phone", false, "USER_PHONE");
        public final static Property Valid_start = new Property(7, String.class, "valid_start", false, "VALID_START");
        public final static Property Valid_end = new Property(8, String.class, "valid_end", false, "VALID_END");
        public final static Property Is_receive = new Property(9, Boolean.class, "is_receive", false, "IS_RECEIVE");
        public final static Property Group_name = new Property(10, String.class, "group_name", false, "GROUP_NAME");
        public final static Property User_type = new Property(11, String.class, "user_type", false, "USER_TYPE");
        public final static Property Dish_date = new Property(12, String.class, "dish_date", false, "DISH_DATE");
    };


    public UsersDao(DaoConfig config) {
        super(config);
    }
    
    public UsersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Users' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ORDER_ID' TEXT," + // 1: order_id
                "'GOODS_NAME' TEXT," + // 2: goods_name
                "'GOODS_NUM' TEXT," + // 3: goods_num
                "'USER_NAME' TEXT," + // 4: user_name
                "'USER_ID' TEXT," + // 5: user_id
                "'USER_PHONE' TEXT," + // 6: user_phone
                "'VALID_START' TEXT," + // 7: valid_start
                "'VALID_END' TEXT," + // 8: valid_end
                "'IS_RECEIVE' INTEGER," + // 9: is_receive
                "'GROUP_NAME' TEXT," + // 10: group_name
                "'USER_TYPE' TEXT," + // 11: user_type
                "'DISH_DATE' TEXT);"); // 12: dish_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Users'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Users entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(2, order_id);
        }
 
        String goods_name = entity.getGoods_name();
        if (goods_name != null) {
            stmt.bindString(3, goods_name);
        }
 
        String goods_num = entity.getGoods_num();
        if (goods_num != null) {
            stmt.bindString(4, goods_num);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(5, user_name);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(6, user_id);
        }
 
        String user_phone = entity.getUser_phone();
        if (user_phone != null) {
            stmt.bindString(7, user_phone);
        }
 
        String valid_start = entity.getValid_start();
        if (valid_start != null) {
            stmt.bindString(8, valid_start);
        }
 
        String valid_end = entity.getValid_end();
        if (valid_end != null) {
            stmt.bindString(9, valid_end);
        }
 
        Boolean is_receive = entity.getIs_receive();
        if (is_receive != null) {
            stmt.bindLong(10, is_receive ? 1l: 0l);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(11, group_name);
        }
 
        String user_type = entity.getUser_type();
        if (user_type != null) {
            stmt.bindString(12, user_type);
        }
 
        String dish_date = entity.getDish_date();
        if (dish_date != null) {
            stmt.bindString(13, dish_date);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Users readEntity(Cursor cursor, int offset) {
        Users entity = new Users( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // order_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goods_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goods_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // valid_start
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // valid_end
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // is_receive
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // group_name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // user_type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // dish_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Users entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrder_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoods_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoods_num(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_phone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setValid_start(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setValid_end(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIs_receive(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setGroup_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUser_type(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDish_date(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Users entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Users entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
